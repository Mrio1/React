{"version":3,"sources":["components/square/square.js","components/board/board.js","components/control-pannel/control-pannel.js","components/game-info/game-info.js","scripts/calculate-next-move.js","components/info-block/info-block.js","components/game/game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","map","square","index","renderSquare","Component","GameModePannel","activeGameMode","onChangeMode","basicClassName","buttons","name","label","btnClassName","GameResetButton","onReset","ControlPannel","onResetGame","GameInfo","moves","onJumpTo","movesItem","step","move","checkDiagonal","arr","own","opossit","isLineGrow","squareSize","rate","recomPosition","position","getDiagonalPosition","positions","isGrow","checkLine","rateMult","isCol","myRes","coef","iCoef","jCoef","localPosition","my","j","itemPosition","itemValue","checkTurn","ownRate","opossitRate","sort","a","b","InfoBlock","info","calculateWinner","lines","length","c","Game","isBlockGame","state","history","Array","fill","stepNumber","xIsNext","firsPlayerIsNext","slice","setState","concat","mode","status","current","winner","setTimeout","checkArr","turn","handleClick","bind","jumpTo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf5901b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './square.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n      <div className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","import React, {Component} from 'react';\r\nimport Square from '../square/square';\r\nimport './board.css';\r\n\r\nclass Board extends Component {\r\n    renderSquare(i) {\r\n    return (\r\n        <Square\r\n            value={this.props.squares[i]}\r\n            onClick={() => {this.props.onClick(i)}}\r\n            key={i}\r\n        />\r\n    );\r\n}\r\n    render() {\r\n        const squares = this.props.squares.map((square, index) => {\r\n            return this.renderSquare(index);\r\n        });\r\n        return (\r\n            <div className='board'>\r\n                {squares}\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React, {Component} from 'react';\r\nimport './control-pannel.css';\r\n\r\nconst GameModePannel = ({activeGameMode, onChangeMode}) => {\r\n    let basicClassName = 'game-mode'\r\n    const buttonsInfo = [\r\n        {name: 'human', label: 'human'},\r\n        {name: 'robot', label: 'robot'},\r\n    ];\r\n\r\n    const buttons = buttonsInfo.map(({name, label}) => {\r\n            let btnClassName = `${basicClassName}__button`;\r\n            const isActive = (name === activeGameMode);\r\n            btnClassName += (isActive) ? ` ${btnClassName}_active` : '';\r\n            return (\r\n                <button\r\n                    className={btnClassName}\r\n                    key={name}\r\n                    onClick={()=>{\r\n                        onChangeMode(name)\r\n                    }}\r\n                >{label}</button>\r\n            )     \r\n        }  \r\n    )\r\n    return (\r\n        <div className={basicClassName}>\r\n            {buttons}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst GameResetButton = ({onReset}) => {\r\n    return (\r\n        <button \r\n            className=\"reset-button\"\r\n            onClick={()=> {\r\n                onReset();\r\n            }}\r\n        > New game</button>\r\n    )\r\n}\r\n\r\nclass ControlPannel extends Component {\r\n    render() {\r\n        const {activeGameMode, onChangeMode, onResetGame} = this.props;\r\n        return (\r\n            <div className=\"control-panel\">\r\n                <GameResetButton\r\n                    onReset = {onResetGame}\r\n                />\r\n                <GameModePannel\r\n                    activeGameMode = {activeGameMode}\r\n                    onChangeMode = {onChangeMode}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ControlPannel;\r\n","import React from 'react';\r\n\r\nconst GameInfo = ({moves, onJumpTo}) => {\r\n    const basicClassName = \"game__info\";\r\n    const movesItem = moves.map((step, move) => {\r\n            return (\r\n                <li \r\n                    className={basicClassName + \"__item\"}\r\n                    key={move}\r\n                >\r\n                    <button \r\n                        className={basicClassName + '__button'}\r\n                        onClick={ ()=>{ onJumpTo(move) } }\r\n                    >\r\n                     {move} step\r\n                    </button>\r\n                </li>\r\n                \r\n            )\r\n\t    })\r\n    return (\r\n        <div className={basicClassName}>\r\n            <ul className={basicClassName + '__list'}>\r\n                {movesItem}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameInfo;\r\n","function checkTurn(arr, own, opossit) {\r\n    const ownRate = [\r\n        checkDiagonal(arr, own, opossit,false, 10),\r\n        checkDiagonal(arr, own, opossit,true, 10),\r\n        checkLine(arr, own, opossit,10, true),\r\n        checkLine(arr, own, opossit,10, false)\r\n    ];\r\n    const opossitRate = [\r\n        checkDiagonal(arr, opossit, own, false, 1),\r\n        checkDiagonal(arr, opossit, own, true, 1),\r\n        checkLine(arr, opossit, own, 1, true),\r\n        checkLine(arr, opossit, own, 1, false)\r\n    ]\r\n    const nextTurn = [...ownRate, ...opossitRate].sort((a, b) => {\r\n        return b.rate - a.rate;\r\n    })[0].positions[0];\r\n    return nextTurn;\r\n}\r\n\r\nfunction checkDiagonal(arr, own, opossit, isLineGrow = false, rateMult = 1, ) {\r\n  const squareSize = 3;\r\n  let rate = 0;\r\n  let recomPosition = [];\r\n  for (let i = 0; i < squareSize; i++) {\r\n    const position = getDiagonalPosition(i, squareSize, isLineGrow);\r\n    const value = arr[position];\r\n    if (value === own) {\r\n      rate = rate > 0 ? 100 * 10 : 10;\r\n    } else if (value) {\r\n      rate = 0;\r\n      break;\r\n    } else {\r\n      recomPosition = [...recomPosition, position];\r\n    }\r\n  }\r\n  return {\r\n    rate: rate || 0,\r\n    positions: recomPosition\r\n  };\r\n}\r\n\r\nfunction getDiagonalPosition(i, squareSize, isGrow = true) {\r\n  if (isGrow) {\r\n    return squareSize * (i + 1) - i - 1;\r\n  } else {\r\n    return i * (squareSize + 1);\r\n  }\r\n}\r\n\r\nfunction checkLine(arr, own, opossit, rateMult = 1, isCol = true) {\r\n  let myRes = 0;\r\n  let recomPosition = null;\r\n  const coef = 3;\r\n  let iCoef = 1;\r\n  let jCoef = 1;\r\n  if (isCol) {\r\n    jCoef *= coef;\r\n  } else {\r\n    iCoef *= coef;\r\n  }\r\n  for (let i = 0; i < 3; i++) {\r\n    let localPosition = [];\r\n    let my = 0;\r\n    for (let j = 0; j < 3; j++) {\r\n      const itemPosition = i * iCoef + j * jCoef;\r\n      const itemValue = arr[itemPosition];\r\n      if (itemValue === own) {\r\n        if (my !== 0) {\r\n          my = 100 * rateMult;\r\n        } else {\r\n          my = 10;\r\n        }\r\n      } else if (itemValue === opossit) {\r\n        my = 0;\r\n        break;\r\n      } else {\r\n        localPosition = [...localPosition, itemPosition];\r\n      }\r\n    }\r\n    if (my > myRes) {\r\n      myRes = my;\r\n      recomPosition = [...localPosition];\r\n    }\r\n  }\r\n  return {\r\n    rate: myRes,\r\n    positions: recomPosition\r\n  };\r\n}\r\n\r\nexport default checkTurn;\r\n","import React from 'react';\r\nimport './info-block.css';\r\n\r\nconst InfoBlock = ({info}) => {\r\n    return (\r\n        <div className=\"info-block\">\r\n            {info}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBlock;\r\n","import React, {Component} from 'react';\r\nimport Board from '../board/board';\r\nimport ControlPannel from '../control-pannel/control-pannel';\r\nimport GameInfo from '../game-info/game-info';\r\nimport checkTurn from '../../scripts/calculate-next-move';\r\nimport InfoBlock from '../info-block/info-block'; \r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n\t\tsuper(props);\r\n    this.isBlockGame = false;\r\n\t\tthis.state = {\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: Array(9).fill(null),\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tstepNumber: 0,\r\n\t\t\txIsNext: true,\r\n      firsPlayerIsNext: true,\r\n      activeGameMode: 'human',\r\n\t\t}\r\n\t}\r\n\r\n\thandleClick(i) {\r\n    if (this.isBlockGame) {return}\r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\t\tif (calculateWinner(squares) || squares[i]) {\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\t\tthis.setState({\r\n\t\t\t\thistory: history.concat([{\r\n\t\t\t\t\tsquares: squares,\r\n\t\t\t\t}]),\r\n\t\t\t\tstepNumber: history.length,\r\n\t\t\t\txIsNext: !this.state.xIsNext,\r\n        firsPlayerIsNext: !this.state.firsPlayerIsNext,\r\n\t\t});\r\n\t}\r\n\r\n\tjumpTo(step) {\r\n\t\tthis.setState({\r\n\t\t\tstepNumber: step,\r\n\t\t\txIsNext: (step % 2) === 0,\r\n\t\t});\r\n\t}\r\n\r\n  onChangeMode(mode) {\r\n    this.setState({\r\n      activeGameMode: mode\r\n    })\r\n  }\r\n\r\n  onResetGame() {\r\n    this.setState({\r\n      history: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: Array(9).fill(null),\r\n\t\t\t\t}\r\n\t\t\t],\r\n      stepNumber: 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {activeGameMode, firsPlayerIsNext, xIsNext, history, stepNumber} = this.state;\r\n\t\tconst current = history[stepNumber];\r\n\t\tconst winner = calculateWinner(current.squares);\r\n\t\tlet status;\r\n\t\tif (winner) {\r\n\t\t\tstatus = 'Win ' + winner;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstatus = 'Next turn: '+ (xIsNext ? 'X' : 'O');\r\n      if (activeGameMode ==='robot' && !firsPlayerIsNext) {\r\n        this.isBlockGame = true;\r\n        setTimeout(()=>{\r\n          this.isBlockGame = false;\r\n          const checkArr = history[history.length - 1].squares;\r\n          const turn = checkTurn(checkArr, 'O', 'X');\r\n          this.handleClick(turn)\r\n        }, 500) \r\n      }\r\n\t\t}\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <ControlPannel\r\n            activeGameMode={activeGameMode}\r\n            onChangeMode = {this.onChangeMode.bind(this)}\r\n            onResetGame = {this.onResetGame.bind(this)}\r\n          />\r\n        \r\n        <div className=\"game__main\">\r\n          <GameInfo\r\n            className=\"game__side\"\r\n            moves={history}\r\n            onJumpTo={this.jumpTo.bind(this)}\r\n          />\r\n          <div className=\"game__play-field\">\r\n            <InfoBlock\r\n              info={status}\r\n            />\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={(i)=> this.handleClick(i)} \r\n            />\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default Game;\r\n","import React, {Component}  from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './components/game/game';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Game/>,\r\n  document.getElementById('root')\r\n);\r\n  "],"sourceRoot":""}